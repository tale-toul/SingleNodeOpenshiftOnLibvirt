---
- name: Local tasks
  hosts: 127.0.0.1
  connection: local
  become: no
  tasks:
    - name: Remove stale entries from known_hosts file in the ansible host
      command: ssh-keygen -R {{ item }}
      loop:
        - "{{ groups['baremetal'] | first }}"
      ignore_errors: yes
    - name: Save terraform variables to a file
      shell: terraform output |tr '=' ':' > ../Ansible/group_vars/all/terraform_outputs.var
      args:
        chdir: ../Terraform
    - name: Load terraform output variables
      include_vars:
        file: group_vars/all/terraform_outputs.var
    - name: Update inventory file
      blockinfile:
        path: inventory
        block: "{{ baremetal_public_ip }}"
        insertafter: "^\\[baremetal\\]$"
    - name: Reload inventory
      meta: refresh_inventory
- name: Setup baremetal host
  hosts: baremetal
  gather_facts: no
  tasks:
    - name: Load terraform output variables
      include_vars:
        dir: group_vars/all
        extensions:
          - 'data'
          - 'var'
        ignore_unknown_extensions: yes
    - name: Wait for EC2 instance connection to become available
      wait_for_connection:
        timeout: 300
    - name: Subscribe with Red Hat
      redhat_subscription:
        state: present
        activationkey: "{{ subscription_activationkey }}"
        org_id: "{{ subscription_org_id }}"
#Create and setup the partition for the default libvirt storage pool
    - name: Create a primary partition in nvme1n1
      parted:
        device: /dev/nvme1n1
        number: 1
        label: gpt
        state: present
    - name: Format the partition created
      filesystem:
        fstype: xfs
        dev: /dev/nvme1n1p1
    - name: Mount partition in /var/lib/libvirt/images
      mount:
        path: /var/lib/libvirt/images
        src: /dev/nvme1n1p1
        fstype: xfs
        state: mounted
    - name: Set permissions for mountpoint
      file:
        path: /var/lib/libvirt/images
        mode: '0751' 
#    - name: Apply new SELinux file context to filesystem
#      command: restorecon -R -Fv /var/lib/libvirt/images/

    - name: Add hashicorp repo for terraform
      get_url:
        url: https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
        dest: /etc/yum.repos.d/hashicorp.repo
        mode: '0644'
    - name: Install required packages
      dnf:
        name: 
          - '@virtualization-host-environment'
          - virt-install
          - libguestfs-tools
          - tmux
          - git
          - gcc
          - libvirt-devel
          - podman
          - terraform
        state: present
    - name: Enable and start firewalld service
      service:
        name: firewalld
        state: started
        enabled: yes
    - name: Add ec2-user to libvirt group
      user:
        name: ec2-user
        groups: libvirt
        append: yes
    - name: Enable and start libvirt service
      service:
        name: libvirtd
        state: started
        enabled: yes

    - name: Enable access to the KVM Virtual Machines VNC displays
      firewalld:
        port: "{{ 5900 + x }}/tcp"
        zone: public
        permanent: yes
        immediate: yes
        state: enabled
      # Support and SNO VMs
      loop: "{{ range(0, 2) | list }}"
      loop_control:
        index_var: x

    - name: Add the user kni
      user:
        name: kni
        groups: libvirt
    - name: Authorize an ssh key for kni user
      authorized_key:
        user: kni
        state: present
        key: "{{ lookup('file', '../Terraform/'+ssh_certificate)  }}"
    - name: Add sudo privileges to kni
      lineinfile:
        path: /etc/sudoers.d/kni
        line: kni ALL=(root) NOPASSWD:ALL
        create: yes
        mode: 0440
    - name: Create {{ cluster_name }} directory
      file:
        path: /home/kni/{{ cluster_name }}
        state: directory
        owner: kni
        group: kni
        mode: '0750'
    - name: Download oc client file
      unarchive:
        src: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_version }}/openshift-client-linux.tar.gz
        dest: /home/kni
        remote_src: yes
      become: yes
      become_user: kni
    - name: Copy oc client to /usr/local/bin
      copy:
        src: /home/kni/oc
        dest: /usr/local/bin/oc
        mode: 0755
        remote_src: yes
    - name: Download Openshift installer
      get_url:
        url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_version }}/openshift-install-linux.tar.gz
        dest: /home/kni
        owner: kni
        group: kni
        mode: '0750'
    - name: Uncompress Openshift installer
      unarchive:
        src: /home/kni/openshift-install-linux.tar.gz
        dest: /home/kni
        remote_src: yes
      become: yes
      become_user: kni
    - name: Retrieve the RHCOS ISO URL
      shell: ./openshift-install coreos print-stream-json | grep location | grep x86_64 | grep iso | cut -d\" -f4
      args:
        chdir: /home/kni
      register: _iso_url
    - name: Download the RHCOS ISO
      get_url:
        url: "{{ _iso_url.stdout }}"
        dest: /home/kni/rhcos-live.x86_64.iso
        owner: kni
        group: kni
        mode: 0644
    - name: Create pull secret file
      copy:
        src: pull-secret
        dest: /home/kni
        owner: kni
        group: kni
        mode: 0640
    - name: Render install-config template
      template:
        src: install-config.j2
        dest: /home/kni/install-config.yaml
        owner: kni
        group: kni
        mode: 0644
    - name: Copy install-config.yaml to {{ cluster_name }}
      copy:
        src: /home/kni/install-config.yaml
        dest: /home/kni/{{ cluster_name }}
        remote_src: yes
        owner: kni
        group: kni
        mode: 0640
    - name: Generate the bootstrap-in-place-for-live-iso Ignition Config asset
      shell: ./openshift-install --dir={{ cluster_name }} create single-node-ignition-config
      args:
        chdir: /home/kni
        creates: "{{ cluster_name }}/bootstrap-in-place-for-live-iso.ign"
      become: yes
      become_user: kni
    - name: Embed the ignition data into the RHCOS ISO
      shell: podman run --privileged --rm -v /dev:/dev -v /run/udev:/run/udev -v $PWD:/data -w /data quay.io/coreos/coreos-installer:release iso ignition embed -fi {{ cluster_name }}/bootstrap-in-place-for-live-iso.ign rhcos-live.x86_64.iso
      args:
        chdir: /home/kni
    - name: Copy rhcos-live.x86_64.iso to /var/lib/libvirt/images
      copy:
        src: /home/kni/rhcos-live.x86_64.iso
        dest: /var/lib/libvirt/images/rhcos-live.x86_64.iso
        remote_src: yes
        owner: qemu
        group: qemu
        mode: 0640

    - name: Copy terraform template to create default storage pool in EC2 baremetal instance
      synchronize:
        src: terraform
        dest: .
        use_ssh_args: yes
        owner: no
        group: no
    - name: Create default libvirt storage pool
      terraform:
        project_path: 'terraform/'
        state: present
        force_init: yes

    - name: Update OS and reboot host
      block:
        - name: Update OS
          dnf:
            name: "*"
            state: latest
          register: _os_update
        - name: Reboot if OS updated
          reboot:
            reboot_timeout: 1300
          when: _os_update.changed == True
      when: update_OS|bool
